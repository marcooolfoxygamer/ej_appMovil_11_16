import React, { useMemo, useCallback } from 'react';
import { Text, View, StyleSheet } from 'react-native';
import { useCalendarContext } from '../CalendarContext';
import Day from './Day';
import { getParsedDate, getMonthDays, getWeekdaysMin, areDatesOnSameDay, getDate, getFormated } from '../utils';
const DaySelector = () => {
  var _getWeekdaysMin;
  const {
    currentDate,
    selectedDate,
    onSelectDate,
    displayFullDays,
    minimumDate,
    maximumDate,
    theme
  } = useCalendarContext();
  const {
    year,
    month,
    hour,
    minute
  } = getParsedDate(currentDate);
  const daysGrid = useMemo(() => {
    const today = new Date();
    return getMonthDays(currentDate, displayFullDays, minimumDate, maximumDate).map(day => {
      const isToday = areDatesOnSameDay(day === null || day === void 0 ? void 0 : day.date, today);
      const selected = areDatesOnSameDay(day === null || day === void 0 ? void 0 : day.date, selectedDate);
      return {
        ...day,
        isToday,
        selected
      };
    });
  },
  // eslint-disable-next-line react-hooks/exhaustive-deps
  [month, year, displayFullDays, minimumDate, maximumDate, selectedDate]);
  const handleSelectDate = useCallback(date => {
    const newDate = getDate(date).hour(hour).minute(minute);
    onSelectDate(getFormated(newDate));
  }, [onSelectDate, hour, minute]);
  return /*#__PURE__*/React.createElement(View, {
    style: styles.container,
    testID: "day-selector"
  }, /*#__PURE__*/React.createElement(View, {
    style: [styles.weekDaysContainer, theme === null || theme === void 0 ? void 0 : theme.weekDaysContainerStyle],
    testID: "week-days"
  }, (_getWeekdaysMin = getWeekdaysMin()) === null || _getWeekdaysMin === void 0 ? void 0 : _getWeekdaysMin.map((item, index) => /*#__PURE__*/React.createElement(View, {
    key: index,
    style: styles.weekDayCell
  }, /*#__PURE__*/React.createElement(Text, {
    style: theme === null || theme === void 0 ? void 0 : theme.weekDaysTextStyle
  }, item)))), /*#__PURE__*/React.createElement(View, {
    style: styles.daysContainer,
    testID: "days"
  }, daysGrid === null || daysGrid === void 0 ? void 0 : daysGrid.map((day, index) => {
    return /*#__PURE__*/React.createElement(Day, {
      key: index,
      day: day,
      theme: theme,
      isToday: day.isToday,
      selected: day.selected,
      onSelectDate: handleSelectDate
    });
  })));
};
const styles = StyleSheet.create({
  container: {
    flex: 1,
    paddingTop: 5,
    width: '100%'
  },
  weekDaysContainer: {
    width: '100%',
    flexDirection: 'row',
    paddingBottom: 10,
    paddingTop: 5,
    marginBottom: 10,
    alignItems: 'center',
    borderBottomWidth: 1,
    borderColor: '#E5E5E5'
  },
  weekDayCell: {
    width: '14.2%',
    alignItems: 'center',
    justifyContent: 'center'
  },
  daysContainer: {
    flex: 1,
    width: '100%',
    height: '100%',
    flexWrap: 'wrap',
    flexDirection: 'row',
    alignContent: 'flex-start'
  }
});
export default DaySelector;
//# sourceMappingURL=DaySelector.js.map