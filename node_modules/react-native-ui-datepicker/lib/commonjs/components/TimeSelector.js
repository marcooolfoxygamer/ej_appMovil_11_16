"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _reactNative = require("react-native");
var _CalendarContext = require("../CalendarContext");
var _Wheel = _interopRequireDefault(require("./TimePicker/Wheel"));
var _enums = require("../enums");
var _utils = require("../utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function createNumberList(num) {
  return new Array(num).fill(0).map((_, index) => index);
}
const TimeSelector = () => {
  const {
    selectedDate,
    currentDate,
    onSelectDate,
    theme
  } = (0, _CalendarContext.useCalendarContext)();
  const {
    hour,
    minute
  } = (0, _utils.getParsedDate)(selectedDate);
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.container,
    testID: "time-selector"
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.timePickerContainer, theme === null || theme === void 0 ? void 0 : theme.timePickerContainerStyle]
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.wheelContainer
  }, /*#__PURE__*/_react.default.createElement(_Wheel.default, {
    value: hour,
    items: createNumberList(24),
    textStyle: {
      ...styles.timePickerText,
      ...(theme === null || theme === void 0 ? void 0 : theme.timePickerTextStyle)
    },
    setValue: value => {
      const newDate = (0, _utils.getDate)(currentDate).hour(value);
      onSelectDate((0, _utils.getFormated)(newDate));
    }
  })), /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: {
      ...styles.timePickerText,
      ...(theme === null || theme === void 0 ? void 0 : theme.timePickerTextStyle)
    }
  }, ":"), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.wheelContainer
  }, /*#__PURE__*/_react.default.createElement(_Wheel.default, {
    value: minute,
    items: createNumberList(60),
    textStyle: {
      ...styles.timePickerText,
      ...(theme === null || theme === void 0 ? void 0 : theme.timePickerTextStyle)
    },
    setValue: value => {
      const newDate = (0, _utils.getDate)(currentDate).minute(value);
      onSelectDate((0, _utils.getFormated)(newDate));
    }
  }))));
};
const styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    alignItems: 'center',
    justifyContent: 'center'
  },
  wheelContainer: {
    flex: 1
  },
  timePickerContainer: {
    flexDirection: 'row',
    alignItems: 'center',
    justifyContent: 'center',
    width: _enums.CALENDAR_HEIGHT / 2,
    height: _enums.CALENDAR_HEIGHT / 2
  },
  timePickerText: {
    fontSize: 24,
    fontWeight: 'bold'
  }
});
var _default = exports.default = TimeSelector;
//# sourceMappingURL=TimeSelector.js.map