"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _reactNative = require("react-native");
var _CalendarContext = require("../CalendarContext");
var _Day = _interopRequireDefault(require("./Day"));
var _utils = require("../utils");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
function _getRequireWildcardCache(e) { if ("function" != typeof WeakMap) return null; var r = new WeakMap(), t = new WeakMap(); return (_getRequireWildcardCache = function (e) { return e ? t : r; })(e); }
function _interopRequireWildcard(e, r) { if (!r && e && e.__esModule) return e; if (null === e || "object" != typeof e && "function" != typeof e) return { default: e }; var t = _getRequireWildcardCache(r); if (t && t.has(e)) return t.get(e); var n = { __proto__: null }, a = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var u in e) if ("default" !== u && Object.prototype.hasOwnProperty.call(e, u)) { var i = a ? Object.getOwnPropertyDescriptor(e, u) : null; i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u]; } return n.default = e, t && t.set(e, n), n; }
const DaySelector = () => {
  var _getWeekdaysMin;
  const {
    currentDate,
    selectedDate,
    onSelectDate,
    displayFullDays,
    minimumDate,
    maximumDate,
    theme
  } = (0, _CalendarContext.useCalendarContext)();
  const {
    year,
    month,
    hour,
    minute
  } = (0, _utils.getParsedDate)(currentDate);
  const daysGrid = (0, _react.useMemo)(() => {
    const today = new Date();
    return (0, _utils.getMonthDays)(currentDate, displayFullDays, minimumDate, maximumDate).map(day => {
      const isToday = (0, _utils.areDatesOnSameDay)(day === null || day === void 0 ? void 0 : day.date, today);
      const selected = (0, _utils.areDatesOnSameDay)(day === null || day === void 0 ? void 0 : day.date, selectedDate);
      return {
        ...day,
        isToday,
        selected
      };
    });
  },
  // eslint-disable-next-line react-hooks/exhaustive-deps
  [month, year, displayFullDays, minimumDate, maximumDate, selectedDate]);
  const handleSelectDate = (0, _react.useCallback)(date => {
    const newDate = (0, _utils.getDate)(date).hour(hour).minute(minute);
    onSelectDate((0, _utils.getFormated)(newDate));
  }, [onSelectDate, hour, minute]);
  return /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.container,
    testID: "day-selector"
  }, /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: [styles.weekDaysContainer, theme === null || theme === void 0 ? void 0 : theme.weekDaysContainerStyle],
    testID: "week-days"
  }, (_getWeekdaysMin = (0, _utils.getWeekdaysMin)()) === null || _getWeekdaysMin === void 0 ? void 0 : _getWeekdaysMin.map((item, index) => /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    key: index,
    style: styles.weekDayCell
  }, /*#__PURE__*/_react.default.createElement(_reactNative.Text, {
    style: theme === null || theme === void 0 ? void 0 : theme.weekDaysTextStyle
  }, item)))), /*#__PURE__*/_react.default.createElement(_reactNative.View, {
    style: styles.daysContainer,
    testID: "days"
  }, daysGrid === null || daysGrid === void 0 ? void 0 : daysGrid.map((day, index) => {
    return /*#__PURE__*/_react.default.createElement(_Day.default, {
      key: index,
      day: day,
      theme: theme,
      isToday: day.isToday,
      selected: day.selected,
      onSelectDate: handleSelectDate
    });
  })));
};
const styles = _reactNative.StyleSheet.create({
  container: {
    flex: 1,
    paddingTop: 5,
    width: '100%'
  },
  weekDaysContainer: {
    width: '100%',
    flexDirection: 'row',
    paddingBottom: 10,
    paddingTop: 5,
    marginBottom: 10,
    alignItems: 'center',
    borderBottomWidth: 1,
    borderColor: '#E5E5E5'
  },
  weekDayCell: {
    width: '14.2%',
    alignItems: 'center',
    justifyContent: 'center'
  },
  daysContainer: {
    flex: 1,
    width: '100%',
    height: '100%',
    flexWrap: 'wrap',
    flexDirection: 'row',
    alignContent: 'flex-start'
  }
});
var _default = exports.default = DaySelector;
//# sourceMappingURL=DaySelector.js.map